<?php

namespace Blugen\Service\Lexicon\V1\ComponentGenerator\Field;

use Blugen\Service\Lexicon\GeneratorInterface;
use Blugen\Service\Lexicon\V1\Factory\ComponentGeneratorFactory;
use Blugen\Service\Lexicon\V1\Property;
use Blugen\Service\Lexicon\V1\TypeSpecificSchema\FieldType\ParamsSchema;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\Literal;

class ParamsComponentGenerator implements GeneratorInterface
{
    private readonly ParamsSchema $schema;
    private readonly ClassType $anonClass;

    public function __construct(
        private readonly ClassType $class,
        private readonly Property $property
    ) {
        $this->schema = new ParamsSchema($this->property->schema());
        $this->anonClass = new ClassType(null);
    }

    public function generate(): void
    {
        $this->generateNestedParameterClass();
        $this->addClassProperty();
        $this->addConstructorAssignment();
        $this->addGetterMethod();
    }

    /**
     * Generates the anonymous class that holds individual param fields.
     */
    private function generateNestedParameterClass(): void
    {
        foreach ($this->schema->properties() as $paramProperty) {
            ComponentGeneratorFactory::create($this->anonClass, $paramProperty)
                ->generate();
        }
    }

    /**
     * Adds the generated anonymous class as a private property.
     */
    private function addClassProperty(): void
    {
        $this->class->addProperty($this->property->name())
            ->setPrivate()
            ->setType('object')
            ->setComment("Autogenerated from 'params' field: {$this->property->name()}");
    }

    /**
     * Adds instantiation of the params object inside the constructor.
     */
    private function addConstructorAssignment(): void
    {
        try {
            $constructor = $this->class->getMethod('__construct');
        } catch (\Nette\InvalidArgumentException) {
            $constructor = $this->class->addMethod('__construct')->setPublic();
        }

        $assignment = new Literal("\$this->{$this->property->name()} = new class $this->anonClass;");
        $constructor->setBody(trim($constructor->getBody() . "\n" . $assignment));
    }

    /**
     * Adds a public getter for the generated property.
     */
    private function addGetterMethod(): void
    {
        $this->class->addMethod("get" . ucfirst($this->property->name()))
            ->setPublic()
            ->setReturnType('object')
            ->setBody("return \$this->{$this->property->name()};");
    }
}
